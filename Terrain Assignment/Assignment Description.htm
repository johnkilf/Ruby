<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<title>Terrain Analyser Assignment</title>
</head>
<body bgcolor="#CCFFCC">
<h2 align="center">Terrain Analyser</h2>
<blockquote>

<p>
You've bought a square plot of land on ebay and you now want to plan how
 to develop this land. The trouble is, you've never been there. All you 
have is the engineer's terrain report which is an NxN matrix where each 
value indicates the height of that 1m<sup>2</sup> cell. An example of the <em>format</em> of the file provided to you is as follows: <br><br>
<tt>
10<br>
1 1 3 4 5 6 7 8 9 10<br>
1 2 3 4 5 6 7 8 9 10<br>
1 2 3 4 5 6 7 8 9 10<br>
1 2 3 4 5 6 7 8 9 10<br>
1 2 3 4 5 6 7 8 9 10<br>
1 2 3 4 5 6 7 8 9 10<br>
1 2 3 4 5 6 7 8 9 10<br>
1 2 3 4 5 6 7 12 12 12<br>
1 2 3 4 5 6 7 12 12 12<br>
1 2 3 4 5 6 7 12 12 12<br><br>
</tt>
This matrix reflects a piece of land that slopes evenly from East to 
West, with a flat, elevated area in the south-easterly corner. The first
 value in the file is N, which tells you the size of the matrix (NxN). 
In the real input, N has a maximum value of 500, but for testing it 
makes sense to use a smaller value. In the above example, N=10. Note 
also that the upper lefthand corner is taken to be (0,0). 
</p><p>
You can create a small test "terrain.dat" file yourself. 
<!--When your program is ready for a tougher
test, try <a href="terrain.dat">this 200x200 input file</a>. Here are <a href="terrain_results.dat">the results you should expect</a>.
-->

</p>
<p>
This assignment breaks into three parts. Parts I is straightforward. 
Parts II and III involve more challenging programming exercises, while 
part IV is very difficult (and don't worry if you have to omit it).
</p>

<p>Remember that marks are awarded for <b> working code</b>.
</p>

<hr align="center" size="2" width="100%">
<h3 align="center">Part I: Basic Analysis</h3>
<p>
Write a Ruby program that reads a file "terrain.dat", in the format described above. 

Your program should output the following:
</p><ul>
<li>the coordinates of the highest point in the site;
</li><li>the <a href="http://www.ptti.com/html/help/Mean_def.htm">mean</a> (average) height across the terrain;
</li><li> the <a href="http://www.ptti.com/html/help/standard.htm">standard deviation</a> across the heights 
(the square root of [the difference between the mean of the squares of the heights and the square of the mean of the heights]).
</li></ul>

The standard deviation tells you how much the height varies across the site.
<hr align="center" size="2" width="100%">

<h3 align="center">Part II: Siting your Swimming Pool</h3>
<p>
One of the things you want to do with your site is to build swimming 
pool. This is best located at the lowest part of the site, and should be
 square in size. Your program should take the desired pool dimension as 
input (in "terrain.dat" after the terrain data) and output the 
coordinates of the upper-lefthand corner of the square of this size with
 the lowest average height.
</p>

<p>
In the above example, for a swimming pool size of 2, the best location 
is at (0,0). If there are several equally good options available, choose
 the one with the smallest standard deviation.
</p>

<hr align="center" size="2" width="100%">

<h3 align="center">Part III: Landing a Helicopter</h3>
<p>
Another thing you want to do with your site is to build a helicopter landing pad. This requires 
a flat, square piece of land, and one that is as large as possible. 
In the above example, the most suitable area is at (7,7) of dimension 3. 
</p>
<p>
Your task is to find the best spot in the terrain for a helicopter 
landing pad, i.e., that largest square area where each cell is of the 
same height. This problem isn't hard to solve conceptually, but 
programming it is a bit tricky. If there are several areas of the same 
size, return the one that has the highest elevation.
</p>

<hr align="center" size="2" width="100%">

<h3 align="center">Part IV: Optimisation</h3>
<p>The naive approach to part III results in a solution of time complexity O(N<sup>4</sup>).
 This is ok as an assignment solution, but if you have a flair for data 
structures and algorithms see if you can find an approach that is  of 
complexity O(N<sup>2</sup>). This is difficult, so don't worry if it's too challenging or you don't have time to do it.
</p>


<hr align="center" size="2" width="100%">

<h3 align="center">Approach</h3>
<p>
Create a class called e.g. Terrain that stores a two-dimensional array of integer values as private data. 
</p><p>
The Terrain class should have a public method for each of the operations described
in part I. You will probably want to add some private methods as well. 
</p><p>
Your first attempt should do a simple version of the full problem, e.g.,
 load the 
Terrain object with data from the input file and calculate the mean of 
the data. Only when you are confident that this works should you attempt
 the
other operations. Remember that marks are awarded for <b> working code</b>.
</p><p>

</p><p>
The Terrain class you create in part I should be <strong>cohesive</strong>. 
</p>
<p>
It is possible to do parts II and III by extending the Terrain class. 
The trouble is that this class will become large and uncohesive as you 
extend it with the fields and methods needed to compute and store the 
swimming pool and helicopter pad. Your program will be better designed 
if you have separate classes that represent the swimming pool and 
helicopter pad. Remember too to avoid duplicating code. 
</p>

<hr align="center" size="2" width="100%">


</blockquote>


</body></html>